/*
 * Kantpoll Project
 * https://github.com/kantpoll
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.kantpoll.android;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.webkit.JavascriptInterface;
import android.widget.ScrollView;

import com.facebook.accountkit.AccountKit;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import javax.net.ssl.HttpsURLConnection;

public class WebAppInterface {
    /**
     * Constants
     **/
    private final static String CERTIFICATE_AUTHORITY_URL
            = "https://certificate.kantpoll.com";

    /**
     * Global variables
     **/
    private final Activity context;
    protected static boolean may_set_vault = false;
    protected static boolean may_get_certificate = false;

    /**
     * Instantiate the interface and set the context
     */
    WebAppInterface(Activity c) {
        context = c;
    }

    /**
     * It is useful when the preloader is called
     */
    @JavascriptInterface
    public void scrollTop() {
        ScrollView scrollView = context.findViewById(R.id.scrollview1);
        scrollView.scrollTo(0, 0);
    }

    /**
     * It is used to register users in a campaign
     *
     * @return {String} received_link
     */
    @JavascriptInterface
    public String getCertificate(String address) {
        if (!may_get_certificate){
            return "{}";
        }

        may_get_certificate = false;
        SharedPreferences sharedPref = context.getSharedPreferences("com.kantpoll.android", Context.MODE_PRIVATE);
        return obtainCertificate(sharedPref.getString("token", null), address);
    }

    /**
     * It receives the vault generated by the home.js script in the Webview
     *
     * @param vault_str {String}
     */
    @JavascriptInterface
    public void setVault(String vault_str) {
        if (!may_set_vault){
            return;
        }

        may_set_vault = false;
        String[] parts = vault_str.split(";");
        String words = parts[0];
        String data = parts[1];

        SharedPreferences.Editor editor = context.getSharedPreferences("com.kantpoll.android", Context.MODE_PRIVATE).edit();
        editor.putString("words", words);
        editor.putString("data", data);
        editor.apply();
    }

    /**
     * This certificate is used to prove the identity of the voter
     *
     * @param token   {String}
     * @param address {String}
     * @return boolean
     */
    private String obtainCertificate(String token, String address) {
        class ObtainCertificateRequest extends AsyncTask<String, Void, String> {

            @Override
            protected String doInBackground(String... params) {
                try {
                    URL url = new URL(CERTIFICATE_AUTHORITY_URL + "/getCertificateMobile?token=" + params[0] +
                            "&address=" + params[1]);
                    HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
                    InputStream is = urlConnection.getInputStream();

                    StringBuilder textBuilder = new StringBuilder();
                    try (Reader reader = new BufferedReader(new InputStreamReader
                            (is, Charset.forName(StandardCharsets.UTF_8.name())))) {
                        int c;
                        while ((c = reader.read()) != -1) {
                            textBuilder.append((char) c);
                        }

                        AccountKit.logOut(); //After the certificate is obtained, it is no longer necessary

                        String certificate = textBuilder.toString();
                        if (!certificate.equals("error") && !certificate.equals("")) {
                            return certificate;
                        }
                        return "{}";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    return "{}";
                }
            }
        }
        try {
            return new ObtainCertificateRequest().execute(token, address).get();
        } catch (Exception e) {
            e.printStackTrace();
            return "{}";
        }
    }
}
